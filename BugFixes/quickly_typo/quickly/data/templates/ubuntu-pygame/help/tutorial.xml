<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [

 <!ENTITY appname "<application>Quickly PyGame Template</application>" >
 <!ENTITY appversion "0.6.1" >
] >

<book lang="en" id="index">
 <bookinfo id="Front">
   <authorgroup>
     <author role="maintainer">
       <firstname>Rick</firstname>
       <surname>Spencer</surname>
     </author> 
   <corpauthor>
     Canonical ltd
   </corpauthor>
   </authorgroup>
   <date>
     2010
   </date>
   <productname class="trade">&appname;</productname>
   <productnumber>&appversion;</productnumber>
   <invpartnumber>2010</invpartnumber>
   <title>&appname; &appversion; Tutorial</title>
 </bookinfo>


<preface>
 <title>About This Guide</title>
 <para>
Use <application>The Quickly Pygame Template</application> to write old school arcade games for running on Ubuntu. PyGame is a framework that handles sprites, collisons, sounds, and everything you need to make a game. You just need to add the game play. The Quickly template creates a starter game for you and comes ready for you to turn into your fun game, and then easily package and share it with other Ubuntu users.
 </para>
 <para>
The Quickly Pygame Template inherits from the Quickly Application template. So you get all the commands that you get from the that template, except "design".
 </para>
</preface>

<chapter>
 <title>
Creating and Running Your Game
 </title>
 <para>
In this tutorial we will start making a top down shooter reminiscent of the space arcade shooters of the 1980s.
 </para>
 <figure>
 <graphic fileref="./images/1.png"></graphic>
 ></figure>
 <para>
We'll do this by creating a default game, editing some of the generated code, writing some new code, and adding our images for sprits.
 </para>
 <para>
Creating a default working game couldn't be simpler. First, open a terminal window to type commands into. When it's open, type the command:
 </para>
 <programlisting>
$quickly create ubuntu-pygame shooter
 </programlisting>
 <graphic fileref="./images/2.png"></graphic>
 <para>
This will create a shooter sub directory containing a complete directory tree and files for an empty python application. The command finishes by running the newly created game. The  game is played by using the "s" and "f" keys to rotate the guy, the "j" key to shoot, and the "l" key to thrust.
 </para>
 <para>
You can play the newly created game. Notice that the <application>Quickly PyGame Template</application> inferred that the game title is "Shooter". Also note that there is a guy that you can control with the s,f,j, and l keys. There is an enemy and a homing missle. You also get a "Game Over" screen, scoring, and levels build in for free.
 </para>
 <para> 
Close the game by closing the window or using the Esc key. Since the game isn't installed into Ubuntu yet, you can't start the game from the application menu yet. To start the game, use the terminal to first cd into the new subdirectory, and then use "quickly run" to start the program.
 </para> 
 <programlisting>
$cd shooter
$quickly run
 </programlisting>
</chapter>
<chapter>
 <title>Creating your own Sprites</title>
 <para>
The first think you probably noticed about the game is that the graphics are so blah! Let's start by adding our own sprites.  We;ll do a compbination of replacing sprites with our own images, and also add a new sprite which we'll use later. Here's a few things to keep in mind:
<itemizedlist>
<listitem>Ink Scape is a great and free tool for creating your sprites. It's in the Featured Applications section of the Software Center.</listitem>
<listitem>If you use Ink Scape, you'll want to export the images as PNGs. But keep the Ink Scape files around in case you want to edit the sprites later.</listitem>
<listitem>Whatever size you make the sprites, that's the size they will be in the game.</listitem>
<listitem>The game will look for sprites in the data/media folder, so make sure you put them there.</listitem>
</itemizedlist>
 </para>
 <para>
I made new images for the guy (the sprite the player controls), enemies, bullets, and the game background. I also made a new sprite called "enemy_bullet.png" which we'll add into the game later. 
<figure>
 <graphic fileref="./images/3.png"></graphic>
</figure> 
Just drag your new sprite images into the shooter/data/media and tell it to replace the images. Now when you run the game, you'll see your new sprites at work.
<figure>
<graphic fileref="./images/4.png"></graphic>
</figure> 
Oops. As you can see, the background image I created was for a game of different dimensions. It's for a game that's 400 pixels wide by 500 pixels high. In the next section, we'll make the game that size.
 </para>
</chapter>
<chapter>
 <title>Changing the Screen Dimensions</title>
 <para>
The first change we'll make is to change the screen dimensions to be oriented from top to bottom. We do this by changing a little code. So let's fire up the code editor first. Run the edit command to fire up the editor.
 </para>
<programlisting>$quickly edit</programlisting> 
<para>This command should open your code in Gedit. The screen dimensions are set in the file "shooterconfig.py". So just go to that file and change the width to 400 and the height to 500.
<programlisting>
#screen dimensions
screen_width = 400
screen_height = 500
</programlisting>
Save the file and run the game again. Notice that the screen wrapping and centering and everything was taken care of for you. That's because you made the change in the shooterconfig.py file. This is the right place to add and change variables that should be availble throughout the game. We'll be make a few more changes here later.

</para>
</chapter>
<chapter>
 <title>Programming the Guy</title>
 <para>
 For this game, what we want is the guy to move left and right across the bottom and not wrap through the screen. Also, we want to make the bullets look like they are coming out of the guy's front.
 </para>
 <para>
To make the guy move just left and right we need to:
<orderedlist>
<listitem>Place the guy at the beginning of each level at the middle and bottom of the screen.</listitem>
<listitem>Add functions to guy.py for moving and stop movig right and left, and remove the rotate functions.</listitem>
<listitem>Change the keyboard input in the bin/shooter file to call these new functions.</listitem>
</orderedlist> 
 </para>
 <para> 
 The functionaly that is specific to the player's sprite is in the guy.py file. The first thing we will do is work on placing the guy properly. Fortunately, the is an existing function that we can modify for this. The function init_position is called to each time the guy needs to be placed on the screen, like after he gets killed for instance . When created, the guy calls the based class function center_on_screen. As you may guess, we will want to change this function. so the guys is positionedhalfway down the screen, and we want him to start a few pixels from the bottom.  Fortunaately we  know how to get the screen dimensions, so it's easy make the change  to init_position.
<programlisting>
     def init_position(self):
        """init_position - resets the Guy's position near the
        bottom of the screen
        
        """
        sw = shooterconfig.screen_width
        sh = shooterconfig.screen_height

        self.x = sw/2
        self.y = sh - 80
</programlisting> 

Now when you run the game, the guy starts at the bottom, which is what we want, but he also rotates when we use the s and the d button, which we do not want. So let's change that next by implementing four new functions:
<itemizedlist>
<listitem>start_moving_left: the user pressed the "s" key</listitem>
<listitem>stop_moving_left: the user released the "s" key</listitem>
<listitem>start_moving_right: the user pressed the "f" key</listitem>
<listitem>stop_moving_right: the user released the "f" key</listitem>
</itemizedlist>
Here's how we will implement these functions:
<orderedlist>
<listitem>Create two tracking variables, _moving_left and _moving_right</listitem>
<listitem>Set these tracking variables to True or False in the start/stop_moving_left/right functions</listitem>
<listitem>In the guy's update function, change the x coordinates of the guy based on these variables</listitem>
</orderedlist>
 </para>

 <para>
First, add the tracking variables to the Guy.__init__function. Add these after the call to BaseSprite.__init__().
<programlisting>
        self._moving_left = False
        self._moving_right = False
</programlisting> 
 
Now the functions for responding to keys simply set those tracking variables as appropriate. So we add these four new functions to guy.py.
<programlisting>
    def start_moving_right(self):
        self._moving_left = False
        self._moving_right = True

    def start_moving_left(self):
        self._moving_left = True
        self._moving_right = False

    def stop_moving_left(self):
        self._moving_left = False

    def stop_moving_right(self):
        self._moving_right = False

</programlisting> 
 </para>
<para>
Now we need change the guy's coordinates based on the tracking variable. Every sprite has an update function. This function is called for every "tick" in the game, and the sprite looks at it's internal data, and updates itself appropriately. By default, the guy's rotation is handled by BaseSprite, so we can ignore that, especially since we won't be using rotation anyway. We're also not using acceleration for the guy, so we can delete a bit of code. Funally, we don't want the guy to "wrap" though the screen, so we whould catch that condition.
</para>
<para>
Let's start with moving the guy 5 pixels per tick. So we can change the top of the update function to look like this:
<programlisting>
    def update(self):
        """update - Update internal data for a game tick""" 
    
        BaseSprite.update(self)

        if self._moving_left:
            self.x -= 5
            if self.x &#60; 0:
                self.x = 0
        if self._moving_right:
            self.x += 5
            if self.x + self.rect.width > shooterconfig.screen_width:
                self.x = shooterconfig.screen_width - self.rect.width
</programlisting>
</para>
<para>
So the guy is ready. He starts in the right place, tracks whether he is moving left or right, and updates his position as desired. Now we just need to hook him up the keys.
</para>
<para>
Keyboard contol is handled in the shoort file in the bin directory. For each click of the clock, the controller_tick function is called.  Detecting keyboard input and directing it as appropriate is handled in this funciton. So what we wante to do is find  where the f and s key events are handled, and call the guy's start/stop_moving_left/right functions there.
</para>
<para>
Key down events are handled first, in a section commented "control" the guy. We want to make a few changes here.
<itemizedlist>
<listitem>Call the start_moving functions instead of rotate functions.</listitem>
<listitem>Remove the call to the accelerate function.</listitem>
<listitem>Remve the call to the hyperspace function.</listitem>
</itemizedlist>
These last two functions aren't needed for our new game. So let's make the changes and this part of the controller_tick function will change to this:
<programlisting>
            #control the guy
            if not game.paused: 
                if event.key == pygame.K_f:
                    g.start_moving_right()
                if event.key == pygame.K_s:
                    g.start_moving_left()
                if event.key == pygame.K_j:
                    g.shoot()

</programlisting>
</para>
<para>
We'll handle the key up functions similarly.
<programlisting>
        #key up events, typically stop actions
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_F11:
                pygame.display.toggle_fullscreen() 
            if event.key == pygame.K_f:
                g.stop_moving_right()
            if event.key == pygame.K_s:
                g.stop_moving_left()

</programlisting>
<figure>
<graphic fileref="./images/5.png"></graphic>
</figure> 
</para>
<para>
Now we've got the guy working the way we want, but we need to make a few changes to to how the guy's bullets are working:
<itemizedlist>
<listitem>The bullets accelerate and go way to fast, they'll miss enemies by skipping over them.</listitem>
<listitem>The bullets should go to the top of the screen, and not stop before or wrap around</listitem>
<listitem>The bullets should appear to come out of the middle of the guy, instead of the side.</listitem>
</itemizedlist>
We'll handle the first problem my changing the Bullet class in the bullet.py file. The acceleration and speed of bullets in the game is configured in the __init__ function of this file. The rate at whcih a bullet accelerates is controlled by member variable acceleration_divisor. We won't need to change that. However, the maximum speed a bullet will reach is defined ny max_velocity, and the lifetme of the bullet is defined by max_ticks. Let's make the bullets go slower, but last longer, by changing max_velocity to 20, and max_ticks to 20 in the Bullet __init__ funciton.
<programlisting>
        self.max_velocity = 20
        self.max_ticks = 20
</programlisting>
This simple change is all that is necessary to control the bullets throughout the game. Note that making this change in the Bullet class means all bullets in the game, including enemy bullets, will now work this way. So let's quickly deal with stopping bullets from wrapping as well. We'll add to the Bullet class's update function to see if the bullet is above or below the screen, and if so, we'll remove it. So we'll change the to of the update function in bullet.py to look like this:
<programlisting>
    def update(self):
        """update - update internal data and position.
        Typically called by the game controller each game
        tick.

        """

        BaseSprite.update(self)

        if self.y &#60; 1:
            self.kill()
        if self.y == shooterconfig.screen_height:
            self.kill()
</programlisting>
Note that a Sprite's kill function, removes it from the game immediately, and with no fanfare. Finally, we need to adjust the bullet so it comes out from the guys the way we want it to. Since this is only related to the way the guy shoots bullets and won't have anything to do with enemy bullets, we'll configure how bullets emerge in the guy.py file.  Let's just tweak the shoot function a bit. 

As you can see in this function, when you create a bullet, you provide it x and y coordinates. We'll just calculate at better x coordinate to start. We'll find the middle of the width of the guy's image, and offset it a bit so the bullet sprite looks like it comes out correctly.

<progamlisting>
                center_x = (self.x + self.rect.width / 2) - 3
</progamlisting>

So we change change the ugy's shoot funciton to look like this:
<programlisting>
    def shoot(self):
        """shoot - fire a bullet. Adds the bullet to the bullet sprite group.
        If the maximum number of bullets premitted would be exceeded, 
        the bullet will not fire. If the guy is exploding, the guy will no
        fire.

        """

        if self.alive:
            #only allow max numbe of  bullets on the screen at a time
            if len(self.bullets.sprites()) &#60; self.max_bullets:
                center_x = (self.x + self.rect.width / 2) - 3
                b = Bullet(center_x,self.y,self.orientation)
                self.bullets.add(b)
</programlisting>
</para>
<para>
<figure>
<graphic fileref="./images/6.png"></graphic>
</figure> 
Now we have the guy working as desired. Moves back and forth across the bottom and shoots bullets the way we want. Next we'll go on to changing the way the enemies work.
</para>

</chapter>
<chapter>
 <title>Programming Enemies</title>
 <para>
The generated game always adds two enemies for each level, a homing missle and a stock "enemy". The homing missle does pretty much what's it name suggests, homes in on the guy and kills him. The Enemy doesn't do much of anything. Just kind of plunks down and waits to get killed. First we're going to remove the homing missle from the game, and then we'll customize the enemies to be a bit more menancing.
 </para>
 <para>
The bin/shooter fileset up a  SpriteGroup already. It's called "enemies" and gets populated each time a new level is created. New levels are created in the next_level function in the bin/shooter file. The next_level function is pretty simple, it increments the game level bu 1, removes any remaining emenemities for the SpriteGroup and then repulates the enemies SpriteGroup. Let's make a couple of  basic chagnnges here. First,  we'll change the xrange so that it creates more enemies with each level, and second, we'll just delete the line that creates the homing missle. Change the next_level function  to make the last few lines as below.
<programlisting>
    #TODO: set up enemies here
    #You can add more enemies or use different enemies
    #depening on the level
    for i in xrange(0,game.level + 3):
        enemies.add(Enemy())
</programlisting>
So for the first level, there will by for enemies, and each time there is an new level created the number of enemies will increase by 1.  Aslo, no more homing missles.
<figure>
<graphic fileref="./images/7.png"></graphic>
</figure> 
 </para>
 <para>
However, there are two things we need to do to enhance the game play with our enemies. First, as you can see, they can start quite close to the guy, even under. We'll need to fix that. Also, we should put them in motion so they are a bit more of a challenge to shoot. We'll do both of the things by modifying the Enemy class in the enemy.py file. Specifically in the  init_postion function.
 </para>
 <para>
If you open the enemy.py file and look for the init_position function, you'll see there is a call to the function in __init__ but there is no function for it. That's because enemy inherits from BaseSprite, which has a default init_position implementation that randomly places it on the screen. So we'll simply override the init_position function in the Enemy class in enemy.py. 
 </para>
<para>
First, to make it a bitter easier to code, grab a reference to the screen height and widgth that you configured and keep those in easier to use variables.
<programlisting>
        sh = shooterconfig.screen_height
        sw = shooterconfig.screen_width
</programlisting>
Next, we want to choose random start position along the X axis. But we don't want the enemy to start too close to either side or it might get stuck in a spot where the guy can't shoot it.  To generate random integers, use the randome module, so you'll have to add an import to the top of the file.
<programlisting>
import random
</programlisting>
We can use the screenwidth to and the enemies own width to determine the right most starting position. For the Y axis, we want the enemies to be far enough away that they can't too easily kill the guy. We'll also make sure they don't get out of reach of the guy's bullets. So between 20 and half way down seems about right.
<programlisting>
        self.x = random.randint(20,sw - self.rect.width - 20)
        self.y = random.randint(20,sh/2)
</programlisting>
Finally, let's put each enemy in motion by picking a random velocity_x within some reasonable bounds.
<programlisting>
        self.velocity_x = random.randint(-30,30)
</programlisting>
Notice that one in 60 of the enemies won't be moving. That's okay because we added padding to keep the enemies from ending up too close to the sides. The full init_position function you need to add looks like this:
<programlisting>
    def init_position(self):
        sh = shooterconfig.screen_height
        sw = shooterconfig.screen_width

        self.x = random.randint(20,sw - self.rect.width - 20)
        self.y = random.randint(20,sh/2)
        self.velocity_x = random.randint(-30,30)
</programlisting>
When you run the game, you can see that the enemies are moving and are good targets to shoot at. But next we'll make the enemies fight back. 
</para> 
<para>
Let's add the ability for an enemy to drop a bomb. By default, enemies can't do anything like that, so we'll have to add a new function. The function will need to do the following things:
<itemizedlist>
<listitem>Figure out where to place the bullet on the screen</listitem>
<listitem>Configure the bullet's velocity and maximum speed</listitem>
<listitem>Create the bullet object and add it to a SpriteGroup</listitem>
</itemizedlist>
We should probably start with this last part. We'll want to create a special sprite group for the bullets to go into. This is primarily so that we can use the SpriteGroups collision detection capabilities later. Also it's easier to manage updates of sprites when they are in a group. First things first, we'll create the sprite group. There's a place in the bin/shooter  for setting up enemies and such, so create another  sprite group there. You create a sprite group by calling  a function in the pygame.sprite module called "RenderUpdates". Lookk for the code block below, and notice the new line creating the new sprite group by calling RenderUpdates.
<programlisting>
#create the player's guy and some enemies
bullets = pygame.sprite.RenderUpdates()
g = Guy(bullets)
enemies = pygame.sprite.RenderUpdates()
enemy_bullets = pygame.sprite.RenderUpdates()
</programlisting>
Now that we have the sprite group called enemy_bullets we want to do three more things with it for now. 
<itemizedlist>
<listitem>Clear out all the sprites in the group when creating a new level or resetting a level after the guy dies.</listitem>
<listitem>Tell the bullets in the sprite group to update themselves at the right time.</listitem>
<listitem>Tell the bullets to draw themselves at the right time.</listitem>
<listitem>Pass a reference to the sprite group to each enemy that is created, so it can add it's bullets to the group.</listitem>
</itemizedlist>
So for the first part, we'll call the sprite group's empty function in next_level and reset_level This function simply removes each sprite in the sprite group from game play. Do this as the first thing for each of these function.
<programlisting>
    enemies.empty()
</programlisting>
For the second point, we'll add to the function in bin/shooter called update_sprites. As you may have guessed, this function is called each tick and tells each sprite to update. For sprites in a sprite group, this is easy, because the SpriteGroup class includes an update function that calls update for each of it's sprites. So just add that to the end of the update_sprites function in bin/shooter, so it looks like the listing here:
<programlisting>
def update_sprites():
    """update_sprites - call update() for all sprites"""
    g.update()
    bullets.update()
    enemies.update() 
    enemy_bullets.update()
</programlisting> 
The view_tick function is called once per tick as well. This funciton updates the view on the screen. We'll add a line of code to tell the bullets to draw themselves right under where the enemies draw themselves.
<programlisting>
    #draw enemies
    enemies.draw(screen)
    enemy_bullets.draw(screen)
</programlisting>
Finally, we need to pass a reference to each enemy as it is created and create a member variable to store that reference. So we need to make a change in the enemy.py fil, to add  an argument for the SpriteGroup in the __init__ function, and also we need to pass the SpriteGroup when creating enemies. So change the Enemy class in enemy.py so the top of the __init__ function looks like so:
<programlisting>
    def __init__(self,enemy_bullets):
        """Creates an Enemy """
        self.enemy_bullets = enemy_bullets

</programlisting>
And then back in the bin/shooter file in the next_level function  when creating enemies, pass in enemy_bullets.
<programlisting>
        enemies.add(Enemy(enemy_bullets))
</programlisting>
Now we have a functioning sprite group and the enemies have a reference to it, we are ready to start actually adding some bullets to it. We'll do this by adding a member function called "shoot" to the enemy. Don't forget to import the Bullet class into the enemy.py file.
<programlisting>
from bullet import Bullet
</programlisting>

First thing is we'll check that the enemy is alive. We don't have to do this, but for this game, we don't want it to shoot if it's int the process of exploding. Then we'll just create a bullet and add it to the SpriteGroup. The last argument we'll pass in is to set the orientatin to 180. Orientation goes clockwise for 360 degrees, with zero being directly up, and 180 being directly down. In code, it looks like the listing below.
<programlisting>
    def shoot(self):
        if self.alive:
            b = Bullet(self.x,self.y, 180)
            b.max_velocity = 6
            b.max_ticks = 50
            self.enemy_bullets.add(b)
</programlisting>
So now we just need to tell the enemies to shoot. We'll do this back in the bin/shooter file, in the"controller_tick function. After the section where we respond to keyboard input, we'll add a few lines to make the enemies shoot. First, we'll make sure the game is not paused, not very fair to shoot in a paused game, is it? Next we'll loop through the enemies and desider if we should call shoot. using our friend random.randint, we'll do this say, one time twenty. So if you add this code to the end of the controller_tick function, your enemies will start dropping bombs.

<programlisting>
    if not game.paused:
        for e in enemies:
            if random.randint(0,20) == 1:
                e.shoot()
</programlisting>
<figure>
<graphic fileref="./images/8.png"></graphic>
</figure> 
So if you run the game, you'll see that the enemies are dropping bulltes like bombs. Nice. However, maybe it would be nicer if the sprites for the enemy bullets were different than the sprites for the guy's bullets. Remember at the beginning of the  tutorial we added an image called enemy_bullet.png to the data/media directory. Now we'll write a bit of code to use that image. First thing, we should add a reference to it in the shooterconfig.py file. In this way, the Enemy class will be able to find it. Just add the following line along with the other image path setting code in shooterconfig.py.
<programlisting>
enemy_bullet_image = image_path + "enemy_bullet.png"
</programlisting>
So now we need to tell the bullets in the Enemy class to use that image. Fortunately the Bullet class takes an optional parameter for the name of an image to use. So just modify the shoot function in the Enemy class to include the path.
<programlisting>
    def shoot(self):
        if self.alive:
            img = shooterconfig.enemy_bullet_image
            b = Bullet(self.x,self.y, 180, img)
            b.max_velocity = 6
            b.max_ticks = 50
            self.enemy_bullets.add(b)
</programlisting>
Now the enemies are dropping bombs with our new image.
<figure>
<graphic fileref="./images/9.png"></graphic>
</figure> 
</para>
<para>
But of course, you many notice the bombs aren't too menancing. In the next chapter we'll add collision detection to make the bombs kill the guy.
</para>
</chapter>
<chapter>
 <title>Collision Detection</title>
 <para>
 Collision detection is when you check for sprites that are overlapping, and run code based on what happened. PyGame makes this very easy by providing some functions to check for overlapping sprites for you. As you will see, it works for individual sprites as well as sprite groups.
 </para>
 <para>
Ok, so let's start by making the bombs that the enemies drop actually kill the guy. To do this, we want to check if the bombs ever collide with the guy, and if they do, we'll tell the guy to explode, and then we'll remove the bomb from the screen. So the logic is "tell me if the guy collides with any enemy_bullets". There is a funciton for this called, pygame.sprite.spritecollideany, which takes a single sprite and a sprite group and returns a reference to any sprite in the sprite group that collided with the single sprite. If there were no collisions, than e will be None. Otherwise, we'll want to tell the guy to explode and tell the bullet to just "kill", which will remove it from play. So we can call it like this:
<programlisting>
        b = pygame.sprite.spritecollideany(g, enemy_bullets)
        if b != None:
            g.explode()
            b.kill()
</programlisting> 
There is a function in bin/shooter called check_collisions which is called once per tick, and is the perfect place to add this code. Add it right under the similar test for the guy colliding with enemies. Now those bombs can kill the guys.
<figure>
<graphic fileref="./images/10.png"></graphic>
</figure> 
If you play for a bit, you may notice that the bullets and the bombs just kind of pass by each other. We can ramp up the game play by making the enemy bullets destroy the guy's bullets, but not visa versa. So that logic here is, have any of the sprites in the bullets sprite group collided with the bullets in the enemy bullets sprite group. There is function for this as well, pygame.sprite.groupcollide. groupcollide takes two sprite lists and returns a dictionary. The keys in the dictionary are any sprites from the first group that are involved in a collision, and the values are the sprites from the second group that collided with the sprite that  for key.  It's a bit hard to explain, but I bet the code is pretty readable. Add this line to the  check_collisions function.
<programlisting>
    hits_dict = pygame.sprite.groupcollide(bullets, enemy_bullets, True, False)
</programlisting>
Now if you run the game, it's a bit more challenging as the enemies are a bit more offensive. This code just kills the bullets involed in any collisions. Notice that I passed in True False at the end of this function. These paramaters determine whether to  kill sprites form either group involved in the collusion.  The True tells the function to kill any bullets involved in collisions, so this was simple to code. 
 </para>
</chapter>
<chapter>
 <title>Playing Sounds</title>
 <para>
 The game is pretty much done in terms of game play, but I want to make one small enhancement. When the enemy bullets kill one of the guy's bullets, I'd like to play a little sound to signify this. So first, I added a little "tink" sound to the data/media directory. After you add your sound, you need to add a reference to it in the shootercongif.py file.
 <programlisting>
tink_sound = sound_path + "tink.wav" 
 </programlisting>
 Now, I want to add a little code after the collision detection between the bullets to play that sound if they collided. I can't just hop straight to that though, first I have to create a sound object.In pygame you manage sounds with the "mixer" module. I don't want to create this object over and over again. So I'll add it to the bin/shooter file where the other objects and such for the game are set up.
 <programlisting>
#set up some objects and models
tink_sound = pygame.mixer.Sound(shooter.shooterconfig.tink_sound) 
 </programlisting>
 Now that I've told the mixer module to give me a sound, I can go ahead and check if there were any collisions between bullets, and play my sound.
 <programlisting>
    hits_dict = pygame.sprite.groupcollide(bullets, enemy_bullets, True, False)
    if len(hits_dict) > 0:
        tink_sound.play() 
 </programlisting>
 So it seems to be working well, but what if you are finding that one of the sounds is too quiet or too loud? Or perhpas you want a certain sound to be loud sometimes and queit other times, for example to simulate  distance. This is easy to do because each sound object has a set_volume function that you can use to set  the sound between 0 (for slient) and 1 (for normal volume). The bullet launch sound I used was a bit loud, so in the bullet.py file, I'll adjust the Bullet class to play the sound a bit more quietly.
 <programlisting>
        self.launch_sound = pygame.mixer.Sound(shooterconfig.guy_shoot_sound)
        self.launch_sound.set_volume(.2)
        self.launch_sound.play() 
 </programlisting>
 </para>
</chapter>
<chapter>
<title>Conclusion</title>
<para>
So now you have a working game! This tutorial introduced the following key concepts for using the Quickly PyGame Template.
<itemizedlist>
<listitem>Creating a game using $quickly create ubuntu-pygame</listitem>
<listitem>Adding your own sprites to the game</listitem>
<listitem>Setting the screen size and other info in the config file</listitem>
<listitem>Programming a player's guy to respond to keyboard input and to shoot</listitem>
<listitem>Programming enemies to move and shoot</listitem>
<listitem>Using collision detection to blow up Sprites</listitem>
<listitem>Playing and adjusting sounds</listitem>
</itemizedlist>
But there is still a lot to do to have a propper game. For example:
<itemizedlist>
<listitem>The bullets that the guy shoots and the bombs that the enemies drop make the same sound, it would probably be nicer if they each made a different sounds.</listitem>
<listitem>The default explosions are crayon drawings, they don't fit in much with the look of the game. Perhaps some new images for the explosion stages would be good.</listitem>
<listitem>There are no power ups! You could create power up classes the derive from BaseSprite to give the guy extra powers, like bigger bullets, more bullets, or extra lives.</listitem>
<listitem>More special enemies, for example you could use the HomingMissle class to create harder to kill enemies.</listitem>
<listitem>The high score list is stored in desktopcouch, so it will sync with your other computers. But it will have to be adjusted to the size we set for the window, and perhaps you can also let the player choose the name that's stored.</listitem>
</itemizedlist>
</para>
</chapter>
</book>
