#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk
from desktopcouch.records.server import CouchDatabase
from desktopcouch.records.record import Record

# Check if we are working in the source tree or from the installed 
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from daerot import AboutDaerotDialog, PreferencesDaerotDialog
from daerot.daerotconfig import getdatapath

class DaerotWindow(gtk.Window):
    __gtype_name__ = "DaerotWindow"

    def __init__(self):
        """__init__ - This function is typically not called directly.
        Creation a DaerotWindow requires redeading the associated ui
        file and parsing the ui definition extrenally,
        and then calling DaerotWindow.finish_initializing().

        Use the convenience function NewDaerotWindow to create
        DaerotWindow object.

        """
        pass

    def finish_initializing(self, builder):
        """finish_initalizing should be called after parsing the ui definition
        and creating a DaerotWindow object with it in order to finish
        initializing the start of the new DaerotWindow instance.

        """
        #get a reference to the builder and set up the signals
        self.builder = builder
        self.builder.connect_signals(self)

        #uncomment the following code to read in preferences at start up
        #dlg = PreferencesDaerotDialog.NewPreferencesDaerotDialog()
        #self.preferences = dlg.get_preferences()

        #code for other initialization actions should be added here
        self.database = CouchDatabase("daerot", create=True)

    def about(self, widget, data=None):
        """about - display the about box for daerot """
        about = AboutDaerotDialog.NewAboutDaerotDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """preferences - display the preferences window for daerot """
        prefs = PreferencesDaerotDialog.NewPreferencesDaerotDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            #make any updates based on changed preferences here
            pass
        prefs.destroy()

    def quit(self, widget, data=None):
        """quit - signal handler for closing the DaerotWindow"""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """on_destroy - called when the DaerotWindow is close. """
        #clean up code for saving application state should be added here

        gtk.main_quit()

    def save_file(self, widget, data=None):
        #this function needs to:
            #Save the list of books to a file
            #So:
                #Take items in all columns and save to file
                #In column 1: take each entry, save to file
        print 'savetesting'
                #need to find all items in each column and save them as such

"""    def addnewbook(self, widget, data=None):

        PSEUDO CODE FOR ADDING NEW BOOKS BELOW:

        #this function needs to:
            #Add a new row containing new items
            #So:
                #In bottom box (hbox2): add a row
                #In column 1 (vbox6), add a text entry item
                #In column 2 (vbox7), add a text entry item
                #In column 3 (vbox10), add a text entry item
        pack_start (vbox6& hbox)...? This right?"""

    #Left side insert a widget to a box.

    #The expand argument to pack_start() or pack_end() controls whether the widgets are laid out in the box to fill in all the extra space in the box so the box is expanded to fill the area allocated to it (true). Or the box is shrunk to just fit the widgets (false). Setting expand to false will allow you to do right and left justifying of your widgets. Otherwise, they will all expand to fit in the box, and the same effect could be achieved by using only one of pack_start() or pack_end() functions.

    #Parameters:
    #    	child 	The Gtk::Widget to be added to box.
     #   	expand 	true if the new child is to be given extra space allocated to box. The extra space will be divided evenly between all children of   box that #use this option.
    #    	fill 	true if space given to child by the expand option is actually allocated to child, rather than just padding it. This parameter has no    effect if expand is set to false. A child is always allocated the full height of a Gtk::HBox and the full width of a Gtk::VBox. This option     affects the other dimension.
        	#padding 	Extra space in pixels to put between this child and its neighbors, over and above the global amount specified by    Gtk::Box:spacing property. If child is a widget at one of the reference ends of box, then padding pixels are also put between child and the reference   edge of box.




#        print 'This here is a test'
   #     widget.hbox2.

def NewDaerotWindow():
        """NewDaerotWindow - returns a fully instantiated
        DaerotWindow object. Use this function rather than
        creating a DaerotWindow directly.
        """

    #look for the ui file that describes the ui
    ui_filename = os.path.join(getdatapath(), 'ui', 'DaerotWindow.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = gtk.Builder()
    builder.add_from_file(ui_filename)
    window = builder.get_object("daerot_window")
    window.finish_initializing(builder)
    return window

if __name__ == "__main__":
    #support for command line options
    import logging, optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Show debug messages")
    (options, args) = parser.parse_args()

    #set the logging level to show debug messages
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')

    #run the application
    window = NewDaerotWindow()
    window.show()
    gtk.main()
